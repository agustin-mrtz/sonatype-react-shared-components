/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
/* eslint react/prop-types: 0 */
import React, { FunctionComponent, ReactNode } from 'react';
import { all, filter, isEmpty, isNil, map, pipe } from 'ramda';

import { ReferenceLink, ReferenceTypeEnum } from '../types';
import DetailLink from './DetailLink';
import RenderDetail from './RenderDetail';

export interface Props {
  advisories?: ReferenceLink[] | null;
}

function hasAllData({referenceType, url}: ReferenceLink) {
  return !!(referenceType && url);
}

function renderLinkWithLabel({referenceType, url}: ReferenceLink): ReactNode {
  return referenceType && url ? (
    <div key={`${referenceType}:${url}`}
         className="nx-truncate-ellipsis nx-vulnerability-details__sub-description-container">
      <dt className="nx-vulnerability-details__sub-description-term">{ReferenceTypeEnum[referenceType] + ':'}</dt>
      <dd className="nx-vulnerability-details__sub-description-desc">
        <DetailLink href={url}>{url}</DetailLink>
      </dd>
    </div>
  ) : null;
}

const renderWithTypeLabels = (links: ReferenceLink[]): ReactNode => {
  const renderedLinks =
    pipe<ReferenceLink[], ReferenceLink[], ReactNode[]>(filter(hasAllData), map(renderLinkWithLabel))(links);
  return isEmpty(renderedLinks) ? null : (
    <dl className="nx-vulnerability-details__sub-description-list">
      {renderedLinks}
    </dl>
  );
};

function renderPlainLink({url}: ReferenceLink): ReactNode {
  return url ? (
    <li key={url} className="nx-truncate-ellipsis">
      <DetailLink href={url}>{url}</DetailLink>
    </li>
  ) : null;
}

const renderPlainLinks = (links: ReferenceLink[]): ReactNode => {
  const renderedLinks =
    pipe<ReferenceLink[], ReferenceLink[], ReactNode[]>(filter(hasAllData), map(renderPlainLink))(links);
  return isEmpty(renderedLinks) ? null : (
    <ul className="nx-list--unstyled">
      {renderedLinks}
    </ul>
  );
};

const hasUnknownType = ({referenceType}: ReferenceLink): boolean => {
  const typeEnum = referenceType && ReferenceTypeEnum[referenceType];
  return isNil(typeEnum) || typeEnum === ReferenceTypeEnum.UNKNOWN;
};

const allTypesUnknown = all<ReferenceLink>(hasUnknownType);

function renderReferenceLinks(links: ReferenceLink[]): ReactNode {
  return allTypesUnknown(links) ? renderPlainLinks(links) : renderWithTypeLabels(links);
}

const AdvisoriesDetail: FunctionComponent<Props> = function AdvisoriesDetail({advisories}) {
  const referenceLinks = advisories && renderReferenceLinks(advisories);
  return isNil(referenceLinks) || isEmpty(referenceLinks) ? null : (
    <RenderDetail title="Advisories">
      {referenceLinks}
    </RenderDetail>
  );
};

export default AdvisoriesDetail;
