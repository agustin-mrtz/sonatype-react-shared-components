/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';

import { getShallowComponent } from '../../../__testutils__/enzymeUtils';
import NxFormGroup, { Props } from '../NxFormGroup';
import NxStatefulTextInput from '../../NxTextInput/stateful/NxStatefulTextInput';

describe('NxFormGroup', function() {
  const minimalProps = {
        label: 'foo',
        children: <NxStatefulTextInput/>
      },
      getShallow = getShallowComponent<Props>(NxFormGroup, minimalProps);

  it('renders a .nx-form-group div with the specified attributes', function() {
    const component = getShallow({ id: 'groupId', lang: 'en_US' });

    expect(component).toMatchSelector('div.nx-form-group');
    expect(component).toHaveProp('id', 'groupId');
    expect(component).toHaveProp('lang', 'en_US');
  });

  it('adds nx-form-group to the specified classnames', function() {
    const component = getShallow({ className: 'asdf' });

    expect(component).toHaveClassName('asdf');
    expect(component).toHaveClassName('nx-form-group');
  });

  it('contains the specified child', function() {
    const input = <NxStatefulTextInput className="foo" />,
        component = getShallow({ children: input });

    expect(component).toContainMatchingElement(NxStatefulTextInput);
    expect(component.find(NxStatefulTextInput)).toHaveClassName('foo');
  });

  describe('nx-label', function() {
    it('is a <label> child of NxFormGroup', function() {
      expect(getShallow()).toContainMatchingElement('label.nx-label');
    });

    it('contains an nx-label__text populated from the label prop', function() {
      expect(getShallow().find('.nx-label')).toContainMatchingElement('.nx-label__text');
      expect(getShallow().find('.nx-label__text')).toHaveText('foo');

      expect(getShallow({ label: <span className="foo">bar</span> }).find('.nx-label__text')).toContainReact(
        <span className="foo">bar</span>
      );
    });

    it('has the nx-label--optional class unless the isRequired prop is true', function() {
      expect(getShallow().find('.nx-label')).toHaveClassName('nx-label--optional');
      expect(getShallow({ isRequired: undefined }).find('.nx-label')).toHaveClassName('nx-label--optional');
      expect(getShallow({ isRequired: null }).find('.nx-label')).toHaveClassName('nx-label--optional');
      expect(getShallow({ isRequired: false }).find('.nx-label')).toHaveClassName('nx-label--optional');
      expect(getShallow({ isRequired: true }).find('.nx-label')).not.toHaveClassName('nx-label--optional');
    });
  });

  describe('nx-sub-label', function() {
    it('is not present by default', function() {
      expect(getShallow()).not.toContainMatchingElement('.nx-sub-label');
    });

    it('is populated with the sublabel content', function() {
      expect(getShallow({ sublabel: 'qwerty' })).toContainMatchingElement('.nx-sub-label');
      expect(getShallow({ sublabel: 'qwerty' }).find('.nx-sub-label')).toHaveText('qwerty');

      expect(getShallow({ sublabel: <span className="foo">bar</span> }).find('.nx-sub-label')).toContainReact(
        <span className="foo">bar</span>
      );
    });
  });

  describe('child id handling', function() {
    describe('when the child does not have an id', function() {
      it('renders the child with an auto-generated id which is also on the label\'s htmlFor prop', function() {
        const component = getShallow();
        expect(component.find(NxStatefulTextInput)).toHaveProp('id');

        const id = component.find(NxStatefulTextInput).prop('id');

        expect(component.find('.nx-label')).toHaveProp('htmlFor', id);
      });
    });

    describe('when the child has an id', function() {
      it('sets the .nx-label\'s htmlFor the the child id', function() {
        const component = getShallow({ children: <NxStatefulTextInput id="foo" /> });

        expect(component.find(NxStatefulTextInput)).toHaveProp('id', 'foo');
        expect(component.find('.nx-label')).toHaveProp('htmlFor', 'foo');
      });
    });
  });

  describe('sublabel id handling', function() {
    describe('when there is a sublabel', function() {
      describe('when the child has no aria-describedby', function() {
        it('adds an autogenerated id to the sublabel and sets that id in the child\'s aria-describedby', function() {
          const component = getShallow({ sublabel: 'asdf' });

          expect(component.find('.nx-sub-label')).toHaveProp('id');

          const id = component.find('.nx-sub-label').prop('id');

          expect(component.find(NxStatefulTextInput)).toHaveProp('aria-describedby', id);
        });
      });

      describe('when the child has an aria-describedby', function() {
        it('adds an autogenerated id to the sublabel and appends that id to the child\'s aria-describedby', function() {
          const component = getShallow({
            sublabel: 'asdf',
            children: <NxStatefulTextInput aria-describedby="foo" />
          });

          expect(component.find('.nx-sub-label')).toHaveProp('id');

          const id = component.find('.nx-sub-label').prop('id');

          expect(component.find(NxStatefulTextInput)).toHaveProp('aria-describedby', `foo ${id}`);
        });
      });
    });

    describe('when there is no sublabel', function() {
      it('leaves existing aria-describedby id tokens in place', function() {
        expect(getShallow().find(NxStatefulTextInput)).toHaveProp('aria-describedby', '');
        expect(getShallow({ children: <NxStatefulTextInput aria-describedby="foo" /> }).find(NxStatefulTextInput))
          .toHaveProp('aria-describedby', 'foo');
      });
    });
  });

  it('handles both types of ids simultaneously', function() {
    const componentWithIds = getShallow({
          sublabel: 'foo',
          children: <NxStatefulTextInput aria-describedby="asdf" id="bar" />
        }),
        sublabelId1 = componentWithIds.find('.nx-sub-label').prop('id'),
        componentWithoutIds = getShallow({ sublabel: 'foo' }),
        inputId = componentWithoutIds.find(NxStatefulTextInput).prop('id'),
        sublabelId2 = componentWithoutIds.find('.nx-sub-label').prop('id');

    expect(componentWithIds.find('.nx-label')).toHaveProp('htmlFor', 'bar');
    expect(componentWithIds.find(NxStatefulTextInput)).toHaveProp('aria-describedby', `asdf ${sublabelId1}`);

    expect(componentWithoutIds.find('.nx-label')).toHaveProp('htmlFor', inputId);
    expect(componentWithoutIds.find(NxStatefulTextInput)).toHaveProp('aria-describedby', `${sublabelId2}`);
  });
});
